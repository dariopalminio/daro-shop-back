import { Prop, SchemaFactory, Schema } from '@nestjs/mongoose';
import { Document, Schema as MongoSchema } from 'mongoose';

export type ProductDocument = Product & Document;

@Schema()
export class ReservationsDocument extends Document {

  @Prop({ required: true })
  orderId: string;

  @Prop({ required: true })
  quantity: number;

  @Prop({ required: true, default: new Date() })
  date: Date;

}

@Schema()
export class Product {

    //_id: holds an ObjectId autogenerated. Iimplicitly has "index: true".

    @Prop()
    sku: string; //Stock-keeping unit of 12 digits

    @Prop()
    barcode: string; //UPC - Universal Product Code (EAN, ISBN, GTIN, Part number)

    @Prop({ required: true, unique: true }) // implicitly has "index: true" because is unique
    name: string;

    @Prop()
    description: string;

    @Prop()
    images: string[]; //array of images name

    @Prop()
    category: string;

    @Prop()
    type: string; 

    @Prop()
    brand: string;

    @Prop()
    color: string;

    @Prop()
    model: string;

    @Prop()
    gender: string;

    @Prop()
    size: string;

    @Prop()
    netCost: number;

    @Prop()
    ivaAmountOnCost: number;

    @Prop()
    grossCost: number;

    @Prop()
    netPrice: number;

    @Prop()
    ivaAmountOnPrice: number;

    @Prop()
    grossPrice: number;

    @Prop({ required: true })
    stock: number; //value of inventory existence 

    @Prop({ required: true, default: [] })
    reservations: ReservationsDocument[]

    @Prop()
    active: Boolean; //is active to sell?

    //new Date() returns the current date as a Date object. mongosh wraps the Date object with the ISODate helper. 
    //The ISODate is in UTC; for example ISODate("2020-05-18T14:10:30Z")
    @Prop({ required: true, default: new Date() })
    createdAt?: Date;

    @Prop({ required: true, default: new Date() }) 
    updatedAt?: Date; 
}

export const ProductSchema = SchemaFactory.createForClass(Product);
