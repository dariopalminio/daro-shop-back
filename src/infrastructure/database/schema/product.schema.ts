import { Prop, SchemaFactory, Schema } from '@nestjs/mongoose';
import { Document, Schema as MongoSchema } from 'mongoose';
import { IProduct } from 'src/domain/model/product/product.interface';
import { IReservation } from 'src/domain/model/product/reservation.interface';

export type ProductDocument = Product & Document;

@Schema()
export class ReservationsDocument extends Document implements IReservation {

  @Prop({ required: true })
  orderId: string;

  @Prop({ required: true })
  quantity: number;

  @Prop({ required: true, default: new Date() })
  date: Date;

}

@Schema()
export class Product implements IProduct {

  //_id: holds an ObjectId autogenerated. Iimplicitly has "index: true",  24 characters.

  @Prop({ required: true })
  sku: string;

  @Prop({ required: true })
  barcode: string; //UPC - Universal Product Code (EAN, ISBN, GTIN, Part number)

  @Prop({ required: true, unique: true }) // implicitly has "index: true" because is unique
  name: string;

  @Prop({ required: true })
  description: string;

  @Prop({ required: true })
  images: string[]; //array of images name

  @Prop({ required: true })
  category: string;

  @Prop({ required: true })
  type: string;

  @Prop({ required: true })
  brand: string;

  @Prop({ required: true })
  color: string;

  @Prop({ required: true })
  model: string;

  @Prop({ required: true })
  gender: string;

  @Prop({ required: true })
  size: string;

  @Prop({ required: true })
  netCost: number;

  @Prop({ required: true })
  ivaAmountOnCost: number;

  @Prop({ required: true })
  grossCost: number;

  @Prop({ required: true })
  netPrice: number;

  @Prop({ required: true })
  ivaAmountOnPrice: number;

  @Prop({ required: true })
  grossPrice: number;

  @Prop({ required: true })
  stock: number; //value of inventory existence 

  @Prop({ required: true, default: [] })
  reservations: ReservationsDocument[]

  @Prop({ required: true })
  active: boolean; //is active to sell?

  //new Date() returns the current date as a Date object. mongosh wraps the Date object with the ISODate helper. 
  //The ISODate is in UTC; for example ISODate("2020-05-18T14:10:30Z")
  @Prop({ required: true, default: new Date() })
  createdAt?: Date;

  @Prop({ required: true, default: new Date() })
  updatedAt?: Date;
}

export const ProductSchema = SchemaFactory.createForClass(Product);
